package com.daogenerator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.daogenerator.effectTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EFFECT_TABLE.
*/
public class effectTableDao extends AbstractDao<effectTable, Long> {

    public static final String TABLENAME = "EFFECT_TABLE";

    /**
     * Properties of entity effectTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Intensity = new Property(2, Long.class, "intensity", false, "INTENSITY");
        public final static Property DutyCycle = new Property(3, Long.class, "dutyCycle", false, "DUTY_CYCLE");
        public final static Property Color1 = new Property(4, Long.class, "color1", false, "COLOR1");
        public final static Property Color2 = new Property(5, Long.class, "color2", false, "COLOR2");
        public final static Property Color3 = new Property(6, Long.class, "color3", false, "COLOR3");
    };


    public effectTableDao(DaoConfig config) {
        super(config);
    }
    
    public effectTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EFFECT_TABLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'INTENSITY' INTEGER," + // 2: intensity
                "'DUTY_CYCLE' INTEGER," + // 3: dutyCycle
                "'COLOR1' INTEGER," + // 4: color1
                "'COLOR2' INTEGER," + // 5: color2
                "'COLOR3' INTEGER);"); // 6: color3
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EFFECT_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, effectTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Long intensity = entity.getIntensity();
        if (intensity != null) {
            stmt.bindLong(3, intensity);
        }
 
        Long dutyCycle = entity.getDutyCycle();
        if (dutyCycle != null) {
            stmt.bindLong(4, dutyCycle);
        }
 
        Long color1 = entity.getColor1();
        if (color1 != null) {
            stmt.bindLong(5, color1);
        }
 
        Long color2 = entity.getColor2();
        if (color2 != null) {
            stmt.bindLong(6, color2);
        }
 
        Long color3 = entity.getColor3();
        if (color3 != null) {
            stmt.bindLong(7, color3);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public effectTable readEntity(Cursor cursor, int offset) {
        effectTable entity = new effectTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // intensity
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // dutyCycle
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // color1
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // color2
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // color3
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, effectTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIntensity(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setDutyCycle(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setColor1(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setColor2(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setColor3(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(effectTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(effectTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
