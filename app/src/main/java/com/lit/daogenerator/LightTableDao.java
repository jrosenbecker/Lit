package com.lit.daogenerator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.lit.daogenerator.LightTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LIGHT_TABLE.
*/
public class LightTableDao extends AbstractDao<LightTable, Long> {

    public static final String TABLENAME = "LIGHT_TABLE";

    /**
     * Properties of entity LightTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Red = new Property(2, Integer.class, "red", false, "RED");
        public final static Property Green = new Property(3, Integer.class, "green", false, "GREEN");
        public final static Property Blue = new Property(4, Integer.class, "blue", false, "BLUE");
        public final static Property RoomId = new Property(5, Long.class, "roomId", false, "ROOM_ID");
        public final static Property HueId = new Property(6, String.class, "hueId", false, "HUE_ID");
        public final static Property EffectOn = new Property(7, Boolean.class, "effectOn", false, "EFFECT_ON");
    };


    public LightTableDao(DaoConfig config) {
        super(config);
    }
    
    public LightTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LIGHT_TABLE' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'NAME' TEXT," + // 1: name
                "'RED' INTEGER," + // 2: red
                "'GREEN' INTEGER," + // 3: green
                "'BLUE' INTEGER," + // 4: blue
                "'ROOM_ID' INTEGER," + // 5: roomId
                "'HUE_ID' TEXT," + // 6: hueId
                "'EFFECT_ON' INTEGER);"); // 7: effectOn
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LIGHT_TABLE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, LightTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer red = entity.getRed();
        if (red != null) {
            stmt.bindLong(3, red);
        }
 
        Integer green = entity.getGreen();
        if (green != null) {
            stmt.bindLong(4, green);
        }
 
        Integer blue = entity.getBlue();
        if (blue != null) {
            stmt.bindLong(5, blue);
        }
 
        Long roomId = entity.getRoomId();
        if (roomId != null) {
            stmt.bindLong(6, roomId);
        }
 
        String hueId = entity.getHueId();
        if (hueId != null) {
            stmt.bindString(7, hueId);
        }
 
        Boolean effectOn = entity.getEffectOn();
        if (effectOn != null) {
            stmt.bindLong(8, effectOn ? 1l: 0l);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public LightTable readEntity(Cursor cursor, int offset) {
        LightTable entity = new LightTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // red
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // green
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // blue
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // roomId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // hueId
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0 // effectOn
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, LightTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setRed(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setGreen(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setBlue(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setRoomId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setHueId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEffectOn(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(LightTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(LightTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
