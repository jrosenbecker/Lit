//package com.lit.daogenerator;
//
//import android.database.Cursor;
//import android.database.sqlite.SQLiteDatabase;
//import android.database.sqlite.SQLiteStatement;
//
//import de.greenrobot.dao.AbstractDao;
//import de.greenrobot.dao.Property;
//import de.greenrobot.dao.internal.DaoConfig;
//
//import com.lit.daogenerator.BridgeInfo;
//
//// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
///**
// * DAO for table BRIDGE_INFO.
//*/
//public class BridgeInfoDao extends AbstractDao<BridgeInfo, Long> {
//
//    public static final String TABLENAME = "BRIDGE_INFO";
//
//    /**
//     * Properties of entity BridgeInfo.<br/>
//     * Can be used for QueryBuilder and for referencing column names.
//    */
//    public static class Properties {
//        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
//        public final static Property Inherited_name = new Property(1, String.class, "inherited_name", false, "INHERITED_NAME");
//        public final static Property Provided_name = new Property(2, String.class, "provided_name", false, "PROVIDED_NAME");
//        public final static Property Room_location = new Property(3, String.class, "room_location", false, "ROOM_LOCATION");
//    };
//
//
//    public BridgeInfoDao(DaoConfig config) {
//        super(config);
//    }
//
//    public BridgeInfoDao(DaoConfig config, DaoSession daoSession) {
//        super(config, daoSession);
//    }
//
//    /** Creates the underlying database table. */
//    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
//        String constraint = ifNotExists? "IF NOT EXISTS ": "";
//        db.execSQL("CREATE TABLE " + constraint + "'BRIDGE_INFO' (" + //
//                "'_id' INTEGER PRIMARY KEY ," + // 0: id
//                "'INHERITED_NAME' TEXT," + // 1: inherited_name
//                "'PROVIDED_NAME' TEXT," + // 2: provided_name
//                "'ROOM_LOCATION' TEXT);"); // 3: room_location
//    }
//
//    /** Drops the underlying database table. */
//    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
//        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BRIDGE_INFO'";
//        db.execSQL(sql);
//    }
//
//    /** @inheritdoc */
//    @Override
//    protected void bindValues(SQLiteStatement stmt, BridgeInfo entity) {
//        stmt.clearBindings();
//
//        Long id = entity.getId();
//        if (id != null) {
//            stmt.bindLong(1, id);
//        }
//
//        String inherited_name = entity.getInherited_name();
//        if (inherited_name != null) {
//            stmt.bindString(2, inherited_name);
//        }
//
//        String provided_name = entity.getProvided_name();
//        if (provided_name != null) {
//            stmt.bindString(3, provided_name);
//        }
//
//        String room_location = entity.getRoom_location();
//        if (room_location != null) {
//            stmt.bindString(4, room_location);
//        }
//    }
//
//    /** @inheritdoc */
//    @Override
//    public Long readKey(Cursor cursor, int offset) {
//        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
//    }
//
//    /** @inheritdoc */
//    @Override
//    public BridgeInfo readEntity(Cursor cursor, int offset) {
//        BridgeInfo entity = new BridgeInfo( //
//            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
//            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // inherited_name
//            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // provided_name
//            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // room_location
//        );
//        return entity;
//    }
//
//    /** @inheritdoc */
//    @Override
//    public void readEntity(Cursor cursor, BridgeInfo entity, int offset) {
//        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
//        entity.setInherited_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
//        entity.setProvided_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
//        entity.setRoom_location(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
//     }
//
//    /** @inheritdoc */
//    @Override
//    protected Long updateKeyAfterInsert(BridgeInfo entity, long rowId) {
//        entity.setId(rowId);
//        return rowId;
//    }
//
//    /** @inheritdoc */
//    @Override
//    public Long getKey(BridgeInfo entity) {
//        if(entity != null) {
//            return entity.getId();
//        } else {
//            return null;
//        }
//    }
//
//    /** @inheritdoc */
//    @Override
//    protected boolean isEntityUpdateable() {
//        return true;
//    }
//
//}
